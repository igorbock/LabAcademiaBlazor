@page "/login"
@rendermode InteractiveServer
@inject IAuthService C_AuthService
@inject NavigationManager C_NavigationManager

<h3>Login</h3>

@if (C_MostrarErros)
{
    <div class="alert alert-danger" role="alert">
        @foreach (var error in C_Erros)
        {
            <p>@error</p>
        }
    </div>
}

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Insira suas credenciais</h5>
        <EditForm Model="@C_Login" OnValidSubmit="@cm_Login" FormName="Login">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label for="usuario">Usuário</label>
                <InputText id="usuario" class="form-control" @bind-Value="@C_Login!.Usuario" />
                <ValidationMessage For="@(() => @C_Login.Usuario)" />
            </div>
            <div class="form-group">
                <label for="senha">Senha</label>
                <InputText id="senha" type="password" class="form-control" @bind-Value="@C_Login.Senha" />
                <ValidationMessage For="@(() => @C_Login.Senha)" />
            </div>
            <button type="submit" class="btn btn-primary">Login</button>
        </EditForm>
    </div>
</div>

@code {
    public LoginDTO? C_Login { get; set; } = new LoginDTO();
    private bool C_MostrarErros { get; set; }
    private IEnumerable<string> C_Erros { get; set; } = new List<string>();

    private async Task cm_Login()
    {
        C_MostrarErros = false;

        try
        {
            await C_AuthService.CM_Login(C_Login!);

            C_NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            C_MostrarErros = true;
            C_Erros = new[] { ex.Message };
        }
    }
}
